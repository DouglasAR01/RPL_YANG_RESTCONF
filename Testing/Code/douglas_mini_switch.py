# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_switch_douglas_mini_switch__switches_switch(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module douglas-mini-switch - based on the path /switches/switch. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__vlan','__nombre','__puertos_habilitados',)

  _yang_name = 'switch'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__puertos_habilitados = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..32']}), is_leaf=True, yang_name="puertos-habilitados", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='puertos-habilitados', is_config=True)
    self.__nombre = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nombre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='string', is_config=True)
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='vlan', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'switches', u'switch']

  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /switches/switch/vlan (vlan)
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /switches/switch/vlan (vlan)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='vlan', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with vlan""",
          'defined-type': "douglas-mini-switch:vlan",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='vlan', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='vlan', is_config=True)


  def _get_nombre(self):
    """
    Getter method for nombre, mapped from YANG variable /switches/switch/nombre (string)
    """
    return self.__nombre
      
  def _set_nombre(self, v, load=False):
    """
    Setter method for nombre, mapped from YANG variable /switches/switch/nombre (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nombre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nombre() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nombre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nombre must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nombre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='string', is_config=True)""",
        })

    self.__nombre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nombre(self):
    self.__nombre = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nombre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='string', is_config=True)


  def _get_puertos_habilitados(self):
    """
    Getter method for puertos_habilitados, mapped from YANG variable /switches/switch/puertos_habilitados (puertos-habilitados)
    """
    return self.__puertos_habilitados
      
  def _set_puertos_habilitados(self, v, load=False):
    """
    Setter method for puertos_habilitados, mapped from YANG variable /switches/switch/puertos_habilitados (puertos-habilitados)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_puertos_habilitados is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_puertos_habilitados() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..32']}), is_leaf=True, yang_name="puertos-habilitados", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='puertos-habilitados', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """puertos_habilitados must be of a type compatible with puertos-habilitados""",
          'defined-type': "douglas-mini-switch:puertos-habilitados",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..32']}), is_leaf=True, yang_name="puertos-habilitados", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='puertos-habilitados', is_config=True)""",
        })

    self.__puertos_habilitados = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_puertos_habilitados(self):
    self.__puertos_habilitados = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'1..32']}), is_leaf=True, yang_name="puertos-habilitados", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='puertos-habilitados', is_config=True)

  vlan = __builtin__.property(_get_vlan, _set_vlan)
  nombre = __builtin__.property(_get_nombre, _set_nombre)
  puertos_habilitados = __builtin__.property(_get_puertos_habilitados, _set_puertos_habilitados)


  _pyangbind_elements = OrderedDict([('vlan', vlan), ('nombre', nombre), ('puertos_habilitados', puertos_habilitados), ])


class yc_switches_douglas_mini_switch__switches(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module douglas-mini-switch - based on the path /switches. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__switch',)

  _yang_name = 'switches'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__switch = YANGDynClass(base=YANGListType("nombre",yc_switch_douglas_mini_switch__switches_switch, yang_name="switch", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='nombre', extensions=None), is_container='list', yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'switches']

  def _get_switch(self):
    """
    Getter method for switch, mapped from YANG variable /switches/switch (list)
    """
    return self.__switch
      
  def _set_switch(self, v, load=False):
    """
    Setter method for switch, mapped from YANG variable /switches/switch (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switch is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switch() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("nombre",yc_switch_douglas_mini_switch__switches_switch, yang_name="switch", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='nombre', extensions=None), is_container='list', yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switch must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("nombre",yc_switch_douglas_mini_switch__switches_switch, yang_name="switch", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='nombre', extensions=None), is_container='list', yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='list', is_config=True)""",
        })

    self.__switch = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switch(self):
    self.__switch = YANGDynClass(base=YANGListType("nombre",yc_switch_douglas_mini_switch__switches_switch, yang_name="switch", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='nombre', extensions=None), is_container='list', yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='list', is_config=True)

  switch = __builtin__.property(_get_switch, _set_switch)


  _pyangbind_elements = OrderedDict([('switch', switch), ])


class douglas_mini_switch(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module douglas-mini-switch - based on the path /douglas-mini-switch. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Este es un módulo de ejemplo, el cuál modela un switch
con características básicas.
  """
  __slots__ = ('_path_helper', '_extmethods', '__switches',)

  _yang_name = 'douglas-mini-switch'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__switches = YANGDynClass(base=yc_switches_douglas_mini_switch__switches, is_container='container', yang_name="switches", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_switches(self):
    """
    Getter method for switches, mapped from YANG variable /switches (container)
    """
    return self.__switches
      
  def _set_switches(self, v, load=False):
    """
    Setter method for switches, mapped from YANG variable /switches (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switches is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switches() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_switches_douglas_mini_switch__switches, is_container='container', yang_name="switches", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switches must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_switches_douglas_mini_switch__switches, is_container='container', yang_name="switches", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='container', is_config=True)""",
        })

    self.__switches = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switches(self):
    self.__switches = YANGDynClass(base=yc_switches_douglas_mini_switch__switches, is_container='container', yang_name="switches", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://www.uis.edu.co', defining_module='douglas-mini-switch', yang_type='container', is_config=True)

  switches = __builtin__.property(_get_switches, _set_switches)


  _pyangbind_elements = OrderedDict([('switches', switches), ])


